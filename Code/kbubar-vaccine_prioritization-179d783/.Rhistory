Diagonal(3)
diag(x = 1, 3, 3)
diag(u_i, 3, 3)
d_p <- 2.1    # mean duration of preclinical infectiousness (days)
d_c <- 2.9    # mean duration of clinical infectiousness (days)
d_s <- 5      # mean duration of subclinical infectiousness (days)
f <- 0.5      # relative infectiousness of subclinical cases
u_i <- 0.078  # susceptibility for age group i (TODO: update so it's a fn of age)
y_i <- 0.5    # probability of clinical infection by age group i (TODO: update so it's a fn of age)
Du <- diag(u_i, rows, rows)
Dy <- diag(y_i, rows, rows)
# From Eames (Davies ref 19)
C <- rbind(c(0.1, 0.3, 6.6, 2.1), c(0.8, 3.8, 14.8, 1), c(1.4, 27.7, 11.2, 1), c(4, 1.8, 7.8, 0.1))
print(C)
dim(C)
dim(C)[1]
rows <- dim(C)[1]
Du <- diag(u_i, rows, rows)
Dy <- diag(y_i, rows, rows)
# Ex contact matrix From Eames (Davies ref 19)
# Age groups: 0-4, 5-18, 19-64, 65+)
C <- rbind(c(0.1, 0.3, 6.6, 2.1), c(0.8, 3.8, 14.8, 1), c(1.4, 27.7, 11.2, 1), c(4, 1.8, 7.8, 0.1))
View(Du)
View(C)
NGM <- (d_p + d_c - f*d_s)*Du*C*Dy + f*d_s*Du*C
View(NGM)
Du*C
Du.*C
Du .* C
Du *.* C
Du .*. C
Du %*% C
X <- rbind(c(1,2), c(3, 4))
Y <- rbind(c(4, 3), c(2, 1))
X %*% Y
NGM <- (d_p + d_c - f*d_s)*Du %*% C %*% Dy + (f*d_s)*Du %*% C
View(NGM)
#### Example without immunity ####
I_0 <- cbind(c(0, 5, 5, 1))
I_0
#### Example without immunity ####
I_0 <- cbind(c(0, 5, 5, 1))
labels <- c("65+", "19-64", "5-18", "0-4")
row.names(I_0) <- labels
View(I_0)
I_1 <- M*I_0
I_1 <- NGM*I_0
I_1 <- NGM %*% I_0
View(I_1)
# Ex contact matrix From Eames (Davies ref 19)
# Age groups: 0-4, 5-18, 19-64, 65+)
C <- rbind(c(0.1, 0.2, 1.6, 0.7), c(0.4, 0.8, 3.3, 0.5), c(0.5, 4.7, 3.3, 0.4), c(1.9, 1.4, 3.7, 0.1))
NGM <- (d_p + d_c - f*d_s)*Du %*% C %*% Dy + (f*d_s)*Du %*% C
#### Example ####
I_0 <- cbind(c(0, 5, 5, 1))
labels <- c("65+", "19-64", "5-18", "0-4")
row.names(I_0) <- labels
# without immunity
I_1 <- NGM %*% I_0
View(I_1)
0.15*.1
.85*.1
60*0.015
0.9*0.15
0.9*0.85
0.765+0.135+0.015+0.085
60*0.085
citation()
version()
lambda <- 0:0.1:2
lambda <- 0:0.01:2
lambda <- 0:2:0.1
?rexp
qchisq(p = 1 - alpha, df = 2*n)
alpha <- 0.05
qchisq(p = 1 - alpha, df = 2*n)
n <- 10
lambda_0 <- 1
alpha <- 0.05
qchisq(p = 1 - alpha, df = 2*n)
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = 1 - alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
}
num_samples <- 100
lambda <- 1
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = 1 - alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
return (count/num_samples)
}
num_samples <- 100
power_xbar(1)
power_xbar(2)
num_samples <- 10000
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
return (count/num_samples)
}
power_xbar(2)
power_xbar(10)
power_xbar(100)
lambda <- linspace(0, 2, 100)
lambda <- linspace(0, 2, 100)
lambda <- seq(0,10,length.out = 100)
power_xmin <- 1 - (1-alpha)^(lambda/lambda_0)
num_samples <- 10000
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
return (count/num_samples)
}
power_xbar(lambda)
lambda <- seq(0.1,10,length.out = 100)
power_xmin <- 1 - (1-alpha)^(lambda/lambda_0)
num_samples <- 10000
power_xbar <- function(lambda){
count <- 1
for (i in 1:num_samples){
x <- rexp(n, rate = lambda)
xbar <- mean(x)
chi <- qchisq(p = alpha, df = 2*n)
if (2*lambda_0*n*xbar < chi){
count <- count + 1
}
}
return (count/num_samples)
}
power_xbar(lambda)
plot(lambda, power_xbar(lambda))
power_vals <- vector(length = length(lambda))
for (i in lambda){
power_vals[i] <- power_xbar(lambda[i])
}
power_vals[i] <- power_xbar(lambda[i])
power_vals <- vector(length = length(lambda))
for (i in 1:length(lambda)){
power_vals[i] <- power_xbar(lambda[i])
}
plot(lambda, power_vals)
plot(lambda, power_vals)
plot(lambda, power_vals, pch = 19)
points(lambda, power_xmin, pch = 19, col = "green")
setwd("~/Vaccine Strategy/Vaccine_Allocation_Project")
# _____________________________________________________________________
# IMPORT ----
# _____________________________________________________________________
source("run_sim.R")
source("helper_functions.R")
country    <- "USA"
source("setup.R")
scale_2 <- scale_u_for_R0(u_var, C, 2.0)
C_2 <- C/scale_2
this_C <- C_2
sero_NY
sero_NY <- rep(0.2, 9)
sero_NY
num_perday
num_perday <- 0.01
ptm <- proc.time()
list_all <- list_kids <- list_adults <- list_elderly <- list_twentyplus <- vector(mode = "list")
list_all_var <- list_kids_var <- list_adults_var <- list_elderly_var <- list_twentyplus_var <- vector(mode = "list")
this_sp <- 0.99
this_se <- 0.70
for (i in seq(0, 50, by = 1)){
j <- i/100
list_all[[paste0(i)]] <- run_sim_new(this_C, j, "all", num_perday, v_e_type, this_v_e, sero = sero_NY)
list_kids[[paste0(i)]] <- run_sim_new(this_C, j, "kids", num_perday, v_e_type, this_v_e, sero = sero_NY)
list_adults[[paste0(i)]] <- run_sim_new(this_C, j, "adults", num_perday, v_e_type, this_v_e, sero = sero_NY)
list_elderly[[paste0(i)]] <- run_sim_new(this_C, j, "elderly", num_perday, v_e_type, this_v_e, sero = sero_NY)
list_twentyplus[[paste0(i)]] <- run_sim_new(this_C, j, "twentyplus", num_perday, v_e_type, this_v_e,  sero = sero_NY)
list_all_var[[paste0(i)]] <- run_sim_new(this_C, j, "all", num_perday, v_e_type, this_v_e, sero = sero_NY, sp = this_sp, se = this_se)
list_kids_var[[paste0(i)]] <- run_sim_new(this_C, j, "kids", num_perday, v_e_type, this_v_e, sero = sero_NY, sp = this_sp, se = this_se)
list_adults_var[[paste0(i)]] <- run_sim_new(this_C, j, "adults", num_perday, v_e_type, this_v_e, sero = sero_NY, sp = this_sp, se = this_se)
list_elderly_var[[paste0(i)]] <- run_sim_new(this_C, j, "elderly", num_perday, v_e_type, this_v_e, sero = sero_NY, sp = this_sp, se = this_se)
list_twentyplus_var[[paste0(i)]] <- run_sim_new(this_C, j, "twentyplus", num_perday, v_e_type, this_v_e, sero = sero_NY, sp = this_sp, se = this_se)
}
proc.time() - ptm
p_mort <- plot_over_vax_avail("deaths", TRUE)
p_mort
plot_over_vax_avail = function(outcome, var = FALSE){
library(ggplot2)
theme_set(theme_minimal(base_size = 12))
x_adults_switch     <- when_strat_switch(list_adults, 3:5)
x_kids_switch       <- when_strat_switch(list_kids, 1:2)
x_elderly_switch    <- when_strat_switch(list_elderly, 7:9)
x_twentyplus_switch <- when_strat_switch(list_twentyplus, 3:9)
# get dataframe for specific outcome
if (var){
df <- get_reduction_df_var(outcome)
x_adults_switch_var     <- when_strat_switch(list_adults_var, 3:5)
x_kids_switch_var       <- when_strat_switch(list_kids_var, 1:2)
x_elderly_switch_var    <- when_strat_switch(list_elderly_var, 7:9)
x_twentyplus_switch_var <- when_strat_switch(list_twentyplus_var, 3:9)
} else {df <- get_reduction_df(outcome)}
points_x <- c(x_kids_switch, x_elderly_switch)
points_y <- c(df[df$strat == "kids" & df$vax_avail == x_kids_switch & df$variable == "constant", ]$reduction,
df[df$strat == "elderly" & df$vax_avail == x_elderly_switch & df$variable == "constant", ]$reduction)
if (x_adults_switch > 0){
points_x <- c(points_x, x_adults_switch)
points_y <- c(points_y, df[df$strat == "adults" & df$vax_avail == x_adults_switch & df$variable == "constant", ]$reduction)
}
if (x_twentyplus_switch > 0){
points_x <- c(points_x, x_twentyplus_switch)
points_y <- c(points_y, df[df$strat == "twentyplus" & df$vax_avail == x_twentyplus_switch & df$variable == "constant", ]$reduction)
}
if (var){
points_x <- c(points_x, x_kids_switch_var, x_elderly_switch_var)
points_y <- c(points_y, df[df$strat == "kids" & df$vax_avail == x_kids_switch_var & df$variable == "var", ]$reduction,
df[df$strat == "elderly" & df$vax_avail == x_elderly_switch_var & df$variable == "var", ]$reduction)
if (x_adults_switch_var > 0){
points_x <- c(points_x, x_adults_switch_var)
points_y <- c(points_y, df[df$strat == "adults" & df$vax_avail == x_adults_switch_var & df$variable == "var", ]$reduction)
}
if (x_twentyplus_switch_var > 0){
points_x <- c(points_x, x_twentyplus_switch_var)
points_y <- c(points_y, df[df$strat == "twentyplus" & df$vax_avail == x_twentyplus_switch_var & df$variable == "var", ]$reduction)
}
}
df_var <- df[df$variable == "var", ]
df_const <- df[df$variable == "constant", ]
# plot
p <- ggplot() +
geom_line(aes(x = df_const$vax_avail, y = df_const$reduction, col = df_const$strat),
size = 0.5, alpha = 0.9) +
geom_line(aes(x = df_var$vax_avail, y = df_var$reduction, col = df_var$strat),
linetype = "dashed", size = 1, alpha = 0.9) +
xlab("Total vaccine supply (% of population)") +
scale_color_brewer(palette = "Dark2", name = "Allocation Strategy",
labels =  c("Adults 20-49", "All Ages", "Adults 60+",
"Under 20", "Adults 20+")) +
scale_y_continuous(expand = c(0,0), limit = c(0, 100), breaks = c(0, 25, 50, 75)) +
scale_x_continuous(expand = c(0,0), limit = c(0, 50)) +#, breaks = c(0,25,50)) +
coord_fixed(50*4/(5*75)) +
theme(legend.position = "none") +
guides(colour = guide_legend(override.aes = list(size=3)))
p <- p + geom_point(aes(x = points_x, y = points_y), size = 1)
if (outcome == "cases"){ p <- p + ylab("Reduction in\ninfections (%)")}
else if (outcome == "deaths"){ p <- p + ylab("Reduction in\ndeaths (%)")}
else if (outcome == "YLL"){ p <- p + ylab("Reduction in\nYLL (%)")}
return(p)
}
p_mort <- plot_over_vax_avail("deaths", TRUE)
p_mort
